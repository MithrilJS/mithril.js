#!/usr/bin/env node
"use strict"

var fs = require("fs")
var path = require("path")

var o = require("../ospec")

function traverseDirectory(pathname, callback) {
	pathname = pathname.replace(/\\/g, "/")
	return new Promise(function(resolve, reject) {
		fs.lstat(pathname, function(err, stat) {
			if (err) reject(err)
			if (stat && stat.isDirectory()) {
				fs.readdir(pathname, function(err, pathnames) {
					if (err) reject(err)
					var promises = []
					for (var i = 0; i < pathnames.length; i++) {
						if (pathnames[i] === "node_modules") continue
						if (pathnames[i][0] === ".") continue
						pathnames[i] = path.join(pathname, pathnames[i])
						promises.push(traverseDirectory(pathnames[i], callback))
					}
					callback(pathname, stat, pathnames)
					resolve(Promise.all(promises))
				})
			}
			else {
				callback(pathname, stat)
				resolve(pathname)
			}
		})
	})
}

function parseRootPathArgs(args) {
	var foundCmd // Raw process.argv starts with the ospec command and commands leading up to it (i.e. `node`)
	var foundOpt // Stop at first sign of a "-" prefixed option flag
	var rootPathArgs = args.filter(function(arg) {
		if (!foundCmd) {
			foundCmd = (/ospec$/).test(arg)
		}
		else if (!foundOpt) {
			foundOpt = (/^-/.test(arg))
			return !foundOpt
		}
		return false
	})
	return rootPathArgs.length ? rootPathArgs : null
}

var rootPaths = parseRootPathArgs(process.argv) || ["."]

Promise.all(rootPaths.map(function(rootPath) {
	return traverseDirectory(rootPath, function(pathname) {
		if (pathname.match(/(?:^|\/)tests\/.*\.js$/)) {
			require(path.normalize(process.cwd()) + "/" + pathname) // eslint-disable-line global-require
		}
	})
}))
.then(o.run)
.catch(function(e) {
	console.log(e.stack)
})

process.on("unhandledRejection", function(e) {
	console.log("Uncaught (in promise) " + e.stack)
})
